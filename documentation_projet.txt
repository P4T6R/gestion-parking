# DOCUMENTATION DU PROJET DE GESTION DE PARKING DE VOITURES

## 1. PRÉSENTATION GÉNÉRALE DU PROJET

Le projet "Laravel Car Parking Management" est une application web développée avec le framework Laravel pour gérer un système de parking de véhicules. Cette application permet de suivre l'entrée et la sortie des véhicules, de gérer les clients, les catégories de véhicules, et de générer des rapports et des tickets.

## 2. ARCHITECTURE DU PROJET

### 2.1 Structure MVC (Modèle-Vue-Contrôleur)

Le projet suit l'architecture MVC de Laravel :
- **Modèles** : Représentent les données et la logique métier
- **Vues** : Interfaces utilisateur pour afficher les données
- **Contrôleurs** : Gèrent les requêtes et coordonnent les modèles et les vues

### 2.2 Composants principaux

1. **Système d'authentification** : Gestion des utilisateurs et des accès
2. **Gestion des véhicules** : Enregistrement et suivi des véhicules
3. **Gestion des entrées/sorties** : Suivi des mouvements des véhicules
4. **Gestion des clients** : Informations sur les propriétaires des véhicules
5. **Gestion des catégories** : Classification des types de véhicules
6. **Génération de rapports** : Production de statistiques et de tickets

## 3. MODÈLES DE DONNÉES

### 3.1 User (Utilisateur)
- Gère les utilisateurs du système (administrateurs, opérateurs)
- Attributs : nom, email, mot de passe, etc.
- Fonctionnalités : authentification, gestion des profils

### 3.2 Vehicle (Véhicule)
- Stocke les informations sur les véhicules
- Attributs : nom, numéro d'immatriculation, numéro de plaque, statut, durée, frais de stationnement, etc.
- Relations : appartient à un client, à une catégorie et à un utilisateur (créateur)
- Fonctionnalités : enregistrement automatique du numéro d'immatriculation, dates d'abonnement

### 3.3 VehicleIn (Entrée de véhicule)
- Enregistre l'entrée d'un véhicule dans le parking
- Attributs : zone de stationnement, numéro de stationnement, ID du véhicule, créateur
- Relations : appartient à un véhicule et à un utilisateur (créateur)
- Fonctionnalités : suivi de l'emplacement du véhicule dans le parking

### 3.4 VehicleOut (Sortie de véhicule)
- Enregistre la sortie d'un véhicule du parking
- Attributs : ID de l'entrée du véhicule, créateur
- Relations : appartient à une entrée de véhicule et à un utilisateur (créateur)
- Fonctionnalités : mise à jour du statut de l'entrée du véhicule lors de la sortie

### 3.5 Customer (Client)
- Stocke les informations sur les propriétaires des véhicules
- Relations : possède plusieurs véhicules

### 3.6 Category (Catégorie)
- Classifie les types de véhicules (voiture, moto, camion, etc.)
- Relations : possède plusieurs véhicules

## 4. CONTRÔLEURS ET FONCTIONNALITÉS

### 4.1 UserController
- Gestion des utilisateurs du système
- Fonctionnalités :
  * Création de nouveaux utilisateurs
  * Affichage de la liste des utilisateurs
  * Modification des informations utilisateur
  * Suppression d'utilisateurs
  * Hachage sécurisé des mots de passe

### 4.2 VehicleController
- Gestion des véhicules
- Fonctionnalités :
  * Enregistrement de nouveaux véhicules
  * Affichage de la liste des véhicules
  * Modification des informations des véhicules
  * Suppression de véhicules
  * Gestion des abonnements (dates de début et de fin)

### 4.3 VehicleInController
- Gestion des entrées de véhicules
- Fonctionnalités :
  * Enregistrement de l'entrée d'un véhicule
  * Affichage des véhicules actuellement dans le parking
  * Affichage de l'historique des entrées
  * Attribution d'un emplacement de stationnement

### 4.4 VehicleOutController
- Gestion des sorties de véhicules
- Fonctionnalités :
  * Enregistrement de la sortie d'un véhicule
  * Mise à jour du statut de l'entrée correspondante
  * Affichage de l'historique des sorties

### 4.5 ReportController
- Génération de rapports et de tickets
- Fonctionnalités :
  * Affichage de la liste des véhicules pour les rapports
  * Génération de tickets PDF pour les véhicules
  * Affichage des informations détaillées sur un véhicule

## 5. ROUTES ET NAVIGATION

### 5.1 Routes principales
- **/** : Page d'accueil (redirection vers la page de connexion)
- **/home** : Tableau de bord principal (après connexion)
- **/users** : Gestion des utilisateurs
- **/customers** : Gestion des clients
- **/categories** : Gestion des catégories de véhicules
- **/vehicles** : Gestion des véhicules
- **/vehiclesIn** : Gestion des entrées de véhicules
- **/vehiclesOut** : Gestion des sorties de véhicules
- **/reports** : Génération de rapports
- **/reports/{vehicle}/ticket** : Génération de tickets pour un véhicule spécifique

### 5.2 Middleware d'authentification
- La plupart des routes sont protégées par le middleware 'auth'
- Seuls les utilisateurs authentifiés peuvent accéder aux fonctionnalités du système

## 6. FONCTIONNEMENT DU SYSTÈME

### 6.1 Processus d'entrée d'un véhicule
1. L'opérateur enregistre un nouveau véhicule ou sélectionne un véhicule existant
2. L'opérateur enregistre l'entrée du véhicule en spécifiant la zone et le numéro de stationnement
3. Le système enregistre automatiquement l'heure d'entrée et l'utilisateur qui a effectué l'opération
4. Le véhicule est marqué comme présent dans le parking (statut = 0)

### 6.2 Processus de sortie d'un véhicule
1. L'opérateur sélectionne un véhicule présent dans le parking
2. L'opérateur enregistre la sortie du véhicule
3. Le système enregistre automatiquement l'heure de sortie et l'utilisateur qui a effectué l'opération
4. Le statut de l'entrée du véhicule est mis à jour (statut = 1)
5. Un ticket peut être généré pour le client

### 6.3 Génération de tickets
1. L'opérateur accède à la section des rapports
2. L'opérateur sélectionne un véhicule
3. Le système génère un ticket PDF contenant les informations du véhicule et de son stationnement
4. Le ticket peut être téléchargé ou imprimé

### 6.4 Gestion des abonnements
1. Les véhicules peuvent avoir un abonnement avec des dates de début et de fin
2. Le système enregistre automatiquement la date de début (date actuelle) et la date de fin (un an plus tard) lors de la création d'un véhicule
3. Ces dates peuvent être modifiées lors de la mise à jour des informations du véhicule

## 7. SÉCURITÉ ET VALIDATION

### 7.1 Authentification
- Utilisation du système d'authentification intégré de Laravel
- Protection des routes avec le middleware 'auth'
- Hachage sécurisé des mots de passe

### 7.2 Validation des données
- Validation des formulaires côté serveur
- Règles de validation pour les champs obligatoires, les formats d'email, etc.
- Messages d'erreur personnalisés

### 7.3 Protection CSRF
- Utilisation de jetons CSRF pour protéger contre les attaques de falsification de requêtes intersites

## 8. INTERFACE UTILISATEUR

### 8.1 Tableaux de bord
- Affichage des statistiques et des informations importantes
- Accès rapide aux fonctionnalités principales

### 8.2 Formulaires
- Formulaires pour la création et la modification des données
- Validation côté client et côté serveur

### 8.3 Tableaux de données
- Affichage des listes d'utilisateurs, de véhicules, etc.
- Fonctionnalités de tri et de filtrage

### 8.4 Tickets
- Génération de tickets PDF pour les clients
- Informations détaillées sur le véhicule et son stationnement

## 9. AMÉLIORATIONS POSSIBLES

### 9.1 Fonctionnalités supplémentaires
- Système de réservation en ligne
- Paiement électronique
- Application mobile pour les clients
- Notifications par email ou SMS

### 9.2 Optimisations techniques
- Mise en cache pour améliorer les performances
- API RESTful pour l'intégration avec d'autres systèmes
- Tests automatisés pour garantir la qualité du code

## 10. CONCLUSION

Le projet "Laravel Car Parking Management" est une solution complète pour la gestion d'un parking de véhicules. Il offre toutes les fonctionnalités nécessaires pour suivre les entrées et sorties de véhicules, gérer les clients et les catégories, et générer des rapports et des tickets. Grâce à son architecture MVC et à l'utilisation du framework Laravel, le projet est modulaire, sécurisé et facile à maintenir.